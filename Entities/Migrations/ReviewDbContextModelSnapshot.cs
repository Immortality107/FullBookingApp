// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingApp.Migrations
{
    [DbContext(typeof(ReviewDbContext))]
    partial class ReviewDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ClientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("ClientID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Bookings", (string)null);

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("d2e84756-7743-4265-a40f-bac354fe0f31"),
                            Amount = 2000.0,
                            ClientID = new Guid("485621b3-2a44-4d22-a870-ee9cc3f22326"),
                            PaymentID = new Guid("2ebdc7a1-1398-48f1-940d-c4022acce082"),
                            ServiceID = new Guid("756d3b5a-a2a2-426c-b9b6-7f8552c64bb4"),
                            Status = "Completed"
                        },
                        new
                        {
                            BookingId = new Guid("1a3e69e4-7ec9-48ff-8713-3a0c5d48702c"),
                            Amount = 200.0,
                            ClientID = new Guid("485621b3-2a44-4d22-a870-ee9cc3f22326"),
                            PaymentID = new Guid("2ebdc7a1-1398-48f1-940d-c4022acce082"),
                            ServiceID = new Guid("756d3b5a-a2a2-426c-b9b6-7f8552c64bb4"),
                            Status = "Waiting"
                        },
                        new
                        {
                            BookingId = new Guid("627bb73e-8232-466f-b348-799b7bcd9b01"),
                            Amount = 50.0,
                            ClientID = new Guid("485621b3-2a44-4d22-a870-ee9cc3f22326"),
                            PaymentID = new Guid("2ebdc7a1-1398-48f1-940d-c4022acce082"),
                            ServiceID = new Guid("756d3b5a-a2a2-426c-b9b6-7f8552c64bb4"),
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.Property<Guid>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ClientID");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            ClientID = new Guid("5ee9b5ae-1d0a-41ea-8943-eb52a4c9f20a"),
                            Age = 28,
                            ClientName = "Kholoud",
                            Country = "Egypt",
                            Email = "kholouddesouky@gmail.com",
                            Gender = "female",
                            Notes = "",
                            Phone = "0100000000"
                        },
                        new
                        {
                            ClientID = new Guid("485621b3-2a44-4d22-a870-ee9cc3f22326"),
                            Age = 36,
                            ClientName = "Maha",
                            Country = "USA",
                            Email = "Test@gmail.com",
                            Gender = "female",
                            Notes = "",
                            Phone = "+12029882614"
                        },
                        new
                        {
                            ClientID = new Guid("dd651db5-c90d-4bda-bab9-a8e8e83b7df2"),
                            Age = 40,
                            ClientName = "Rania",
                            Country = "Germany",
                            Email = "Rania@gmail.com",
                            Gender = "female",
                            Notes = "",
                            Phone = "+4932211077146"
                        });
                });

            modelBuilder.Entity("Entities.Appointments", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("BookingID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PaymentMethods", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("fc64db83-e94b-4e07-a438-1b71cc4e2fb8"),
                            Location = "Egypt",
                            PaymentDetails = "01006970792",
                            PaymentName = "Vodafone Cash"
                        },
                        new
                        {
                            PaymentId = new Guid("8762980a-28f1-47b4-84cd-47d65ae7ca71"),
                            Location = "Egypt",
                            PaymentDetails = "Asmaa.mostafa1987@instapay",
                            PaymentName = "Instapay"
                        },
                        new
                        {
                            PaymentId = new Guid("2ebdc7a1-1398-48f1-940d-c4022acce082"),
                            Location = "Egypt",
                            PaymentDetails = "100044321747",
                            PaymentName = "CIB Bank Transfer"
                        },
                        new
                        {
                            PaymentId = new Guid("945f0aa6-2210-46c5-bcb5-67b77d221f29"),
                            Location = "International",
                            PaymentDetails = "+1 (214) 912-7068",
                            PaymentName = "Zelle (US)"
                        },
                        new
                        {
                            PaymentId = new Guid("fffe67f8-db58-4f1d-907e-a3753ce3c939"),
                            Location = "International",
                            PaymentDetails = "IBAN: AE85 0260 0010 1579 8179 101 - Accountnumber: 1015798179101 - Name: Mayar Ahmed",
                            PaymentName = "Emirates NBD"
                        },
                        new
                        {
                            PaymentId = new Guid("dfc9ec27-9b64-47b8-ab41-799dc2f61f03"),
                            Location = "International",
                            PaymentDetails = "IBAN:SA16 8000 0858 6080 1286 3374 - Accountnumber:  077030010006082863374 - Name: Hassan Mohamed Shawki ElHayawan",
                            PaymentName = "بنك الراجحي السعودي"
                        },
                        new
                        {
                            PaymentId = new Guid("bd622138-dc61-456e-9187-386bd55c7656"),
                            Location = "International",
                            PaymentDetails = "a_abdelgawad@hotmail.com",
                            PaymentName = "Paypal"
                        });
                });

            modelBuilder.Entity("RegisteredAccounts", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("RegisteredAccount", (string)null);
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookingID");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            ReviewId = new Guid("e3cfe13f-03bb-4b12-85d8-f4e4a7cd4aa1"),
                            BookingID = new Guid("d2e84756-7743-4265-a40f-bac354fe0f31"),
                            ReviewMessage = "Excellent Payment, highly recommended!"
                        },
                        new
                        {
                            ReviewId = new Guid("d84c39b2-0f8e-4e6d-8918-31c264ce3fd2"),
                            BookingID = new Guid("1a3e69e4-7ec9-48ff-8713-3a0c5d48702c"),
                            ReviewMessage = "Satisfactory experience overall."
                        },
                        new
                        {
                            ReviewId = new Guid("627bb73e-8232-466f-b348-799b7bcd9b01"),
                            BookingID = new Guid("d2e84756-7743-4265-a40f-bac354fe0f31"),
                            ReviewMessage = "Very friendly staff and clean environment."
                        });
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDescribtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ServicePriceInternational")
                        .HasColumnType("float");

                    b.Property<double>("ServicePriceLocal")
                        .HasColumnType("float");

                    b.HasKey("ServiceId");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceId = new Guid("e412d77e-77d3-4c06-8f7b-4df9490e04d6"),
                            ServiceDescribtion = "",
                            ServiceName = "(استشارات فردية (اونلاين/اوفلاين",
                            ServicePriceInternational = 170.0,
                            ServicePriceLocal = 1700.0
                        },
                        new
                        {
                            ServiceId = new Guid("3fe0d485-b0e4-4697-8cbe-651ef310b751"),
                            ServiceDescribtion = " لتعلم قبول الرفض وازاي تقولي لاءه وتصنعي حدود امنه بكل لطف دايره تعايش وتدريب .",
                            ServiceName = "دايرة الرفض",
                            ServicePriceInternational = 300.0,
                            ServicePriceLocal = 3000.0
                        },
                        new
                        {
                            ServiceId = new Guid("10f2cd9c-95c3-4d80-afc6-b3b36836f588"),
                            ServiceDescribtion = " لتشافي علاقتك مع المال والوصول للثراء والحريه الماليه بالتناغم مع الانوثه",
                            ServiceName = "دايرة الوفرة المالية",
                            ServicePriceInternational = 350.0,
                            ServicePriceLocal = 3500.0
                        },
                        new
                        {
                            ServiceId = new Guid("8ec38d0b-1e87-43a2-92fc-f8511a9de30d"),
                            ServiceDescribtion = "لتواصل اعمق و مريح مع جسدك  .. هي فرصة لعمل علاقه حقيقيه مع جسمك كأنثى واستكشافه ، وقبوله زي ماهو بدون تعديلات او بدون شروط",
                            ServiceName = "دايرة مساحة جسد",
                            ServicePriceInternational = 500.0,
                            ServicePriceLocal = 5000.0
                        },
                        new
                        {
                            ServiceId = new Guid("64ed73c8-94c4-44b8-b8ef-af46be9f2d73"),
                            ServiceDescribtion = "لاسكتشاف شغفك وبصمتك الفريده وتحويلها لمشروع وادارته والربح منه بالتناغم مع الانوثه",
                            ServiceName = "دايرة سحر التمكين",
                            ServicePriceInternational = 350.0,
                            ServicePriceLocal = 3500.0
                        },
                        new
                        {
                            ServiceId = new Guid("756d3b5a-a2a2-426c-b9b6-7f8552c64bb4"),
                            ServiceDescribtion = "لممارسة الامتنان",
                            ServiceName = "دايرة الشكر",
                            ServicePriceInternational = 60.0,
                            ServicePriceLocal = 600.0
                        },
                        new
                        {
                            ServiceId = new Guid("a0561a1e-f2ee-4256-bf77-7b4a83d20d35"),
                            ServiceDescribtion = "هنتقابل مرة في الشهر نحكي ونتشارك ونسمع بعض بقلوب رحيمة بدون احكام ولا نصايح ندعم , نطبطب , نحضن , نقبل بعض بكل اللي فينا باللي عاجبنا و اللي مش عاجبنا",
                            ServiceName = "دايرة الأنس",
                            ServicePriceInternational = 60.0,
                            ServicePriceLocal = 600.0
                        },
                        new
                        {
                            ServiceId = new Guid("0e0dd7bd-4941-4d50-956e-d3553580fadc"),
                            ServiceDescribtion = "لمشاركة كل تحديات الحياه بشكل عام ، وانطلاقه امنه واكثر صحية",
                            ServiceName = "دايرة سنجل مامي",
                            ServicePriceInternational = 60.0,
                            ServicePriceLocal = 600.0
                        });
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.HasOne("Client", "client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentMethods", "payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("client");

                    b.Navigation("payment");
                });

            modelBuilder.Entity("Entities.Appointments", b =>
                {
                    b.HasOne("Booking", "booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("booking");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.HasOne("Booking", "booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("booking");
                });
#pragma warning restore 612, 618
        }
    }
}
